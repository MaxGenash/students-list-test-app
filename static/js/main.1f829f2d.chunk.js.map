{"version":3,"sources":["reducers/modals.js","reducers/students.js","reducers/grades.js","reducers/index.js","constants/actionTypes.js","store.js","constants/index.js","components/StudentsDataForm.js","actions/modals.js","utils.js","actions/students.js","components/StudentsPage.js","components/GradesDataForm.js","actions/grades.js","components/GradesPage.js","components/Header.js","components/Footer.js","components/App.js","index.js"],"names":["initialState","activeModal","modalProps","studentsById","isFetchingData","fetchDataError","gradesById","combineReducers","modals","state","arguments","length","undefined","action","type","Object","objectSpread","id","grades","defineProperty","record","_","omit","ids","error","students","recordId","history","createHistory","basename","process","middleware","thunk","routerMiddleware","composedEnhancers","compose","apply","applyMiddleware","concat","createStore","connectRouter","reducers","MODAL_PORTAL_ID","modalIds","StudentsDataForm","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setFormData","field","e","setState","form","target","value","onFormSubmit","preventDefault","onSubmit","initialData","firstName","lastName","birthdayDate","react_default","a","createElement","Dialog_default","open","onClose","DialogTitle_default","isEditMode","DialogContent_default","data-test","Grid_default","container","spacing","item","xs","TextField_default","required","label","onChange","bind","fullWidth","inputProps","split","InputLabelProps","shrink","DialogActions_default","Button_default","onClick","color","React","Component","defaultProps","showModal","dispatch","hideModal","getNextRecordId","recordsById","Math","max","toConsumableArray","keys","map","Number","fetchStudentsRecords","getState","fetch","mode","method","headers","Content-Type","then","response","contentType","get","status","includes","json","Error","data","success","entities","catch","message","submitStudentsDataForm","editStudentRecord","createNewStudentRecord","deleteStudentRecord","StudentsPage","getTableOptions","filterType","print","download","filter","selectableRows","elevation","pagination","responsive","customToolbar","Tooltip_default","title","IconButton_default","openStudentsDataForm","Icon_default","getTableColumns","name","options","customBodyRender","studentsDataFormProps","className","classes","actionButtonsContainer","actionButton","sort","Date","toLocaleDateString","portalContainer","document","getElementById","_this$props","tableData","closeStudentsDataForm","isOpenStudentsDataForm","Typography_default","align","variant","errorMessage","loadingMessage","dist_default","columns","Portal_default","components_StudentsDataForm","assign","connect","_ref","values","_ref2","date","getFullYear","bindActionCreators","formProps","withStyles","theme","margin","unit","whiteSpace","breakpoints","down","padding","GradesDataForm","studentId","profession","testDate","grade","FormControl_default","InputLabel_default","htmlFor","Select_default","native","key","entries","studentNamesById","slicedToArray","isOpen","fetchGradesRecords","submitGradesDataForm","editGradeRecord","createNewGradeRecord","deleteGradeRecords","GradesPage","openGradesDataForm","gradesDataFormProps","closeGradesDataForm","isOpenGradesDataForm","components_GradesDataForm","getStudentName","mapValues","rec","withRouter","AppBar_default","position","Tabs_default","location","pathname","Tab_default","component","NavLink","to","footer","backgroundColor","palette","background","default","app","display","flexDirection","minHeight","minWidth","paper","pageContainer","flex","components_Header","Switch","Route","path","Redirect","components_Footer","render","es","store","lib","react","CssBaseline_default","components_App","querySelector"],"mappings":"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","file":"static/js/main.1f829f2d.chunk.js","sourcesContent":["import { HIDE_MODAL, SHOW_MODAL } from \"../constants/actionTypes\";\r\n\r\nconst initialState = {\r\n  activeModal: null,\r\n  modalProps: {}\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  if (action.type === SHOW_MODAL) {\r\n    return {\r\n      ...state,\r\n      activeModal: action.id,\r\n      modalProps: action.modalProps\r\n    };\r\n  }\r\n  if (action.type === HIDE_MODAL && state.activeModal === action.id) {\r\n    return {\r\n      ...state,\r\n      activeModal: null,\r\n      modalProps: {}\r\n    };\r\n  }\r\n  return state;\r\n}\r\n","import _ from 'lodash';\r\nimport {\r\n  CREATE_NEW_STUDENT_RECORD,\r\n  EDIT_STUDENT_RECORD,\r\n  DELETE_STUDENT_RECORD,\r\n  FETCH_STUDENTS_RECORDS_REQUEST,\r\n  FETCH_STUDENTS_RECORDS_SUCCESS,\r\n  FETCH_STUDENTS_RECORDS_FAIL\r\n} from \"../constants/actionTypes\";\r\n\r\nconst initialState = {\r\n  studentsById: null,     // null = \"not fetched yet\"; {} = \"fetched and there is an empty list\"\r\n  isFetchingData: false,  // the field is needed in case we want to fetch data again later (not only initial loading)\r\n  fetchDataError: ''\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CREATE_NEW_STUDENT_RECORD:\r\n    case EDIT_STUDENT_RECORD:\r\n      return {\r\n        ...state,\r\n        studentsById: {\r\n          ...state.studentsById,\r\n          [action.record.id]: action.record\r\n        },\r\n      };\r\n    case DELETE_STUDENT_RECORD:\r\n      return {\r\n        ...state,\r\n        studentsById: _.omit(state.studentsById, action.recordId),\r\n      };\r\n\r\n    case FETCH_STUDENTS_RECORDS_REQUEST:\r\n      return {\r\n        ...state,\r\n        fetchDataError: '',\r\n        isFetchingData: true,\r\n      };\r\n    case FETCH_STUDENTS_RECORDS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        fetchDataError: '',\r\n        isFetchingData: false,\r\n        // Note that we add the fetched data to the existing data to prevent overwriting of the local changes\r\n        studentsById: {...state.studentsById, ...action.studentsById},\r\n      };\r\n    case FETCH_STUDENTS_RECORDS_FAIL:\r\n      return {\r\n        ...state,\r\n        isFetchingData: false,\r\n        fetchDataError: action.error,\r\n        studentsById: null\r\n      };\r\n      \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport {\r\n  CREATE_NEW_GRADE_RECORD,\r\n  EDIT_GRADE_RECORD,\r\n  DELETE_GRADE_RECORDS,\r\n  FETCH_GRADES_RECORDS_REQUEST,\r\n  FETCH_GRADES_RECORDS_SUCCESS,\r\n  FETCH_GRADES_RECORDS_FAIL\r\n} from \"../constants/actionTypes\";\r\n\r\nconst initialState = {\r\n  gradesById: null,       // null = \"not fetched yet\"; {} = \"fetched and there is an empty list\"\r\n  isFetchingData: false,  // the field is needed in case we want to fetch data again later (not only initial loading)\r\n  fetchDataError: ''\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CREATE_NEW_GRADE_RECORD:\r\n    case EDIT_GRADE_RECORD:\r\n      return {\r\n        ...state,\r\n        gradesById: {\r\n          ...state.gradesById,\r\n          [action.record.id]: action.record\r\n        },\r\n      };\r\n    case DELETE_GRADE_RECORDS:\r\n      return {\r\n        ...state,\r\n        gradesById: _.omit(state.gradesById, action.ids),\r\n      };\r\n\r\n    case FETCH_GRADES_RECORDS_REQUEST:\r\n      return {\r\n        ...state,\r\n        fetchDataError: '',\r\n        isFetchingData: true,\r\n      };\r\n    case FETCH_GRADES_RECORDS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        fetchDataError: '',\r\n        isFetchingData: false,\r\n        // Note that we add the fetched data to the existing data to prevent overwriting of the local changes\r\n        gradesById: {...state.gradesById, ...action.gradesById},\r\n      };\r\n    case FETCH_GRADES_RECORDS_FAIL:\r\n      return {\r\n        ...state,\r\n        isFetchingData: false,\r\n        fetchDataError: action.error,\r\n        gradesById: null\r\n      };\r\n      \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport modals from \"./modals\";\r\nimport students from \"./students\";\r\nimport grades from \"./grades\";\r\n\r\nexport default combineReducers({\r\n  modals,\r\n  grades,\r\n  students\r\n});\r\n","export const SHOW_MODAL = 'SHOW_MODAL';\r\nexport const HIDE_MODAL = 'HIDE_MODAL';\r\n\r\nexport const CREATE_NEW_STUDENT_RECORD = 'CREATE_NEW_STUDENT_RECORD';\r\nexport const EDIT_STUDENT_RECORD = 'EDIT_STUDENT_RECORD';\r\nexport const DELETE_STUDENT_RECORD = 'DELETE_STUDENT_RECORD';\r\nexport const FETCH_STUDENTS_RECORDS_REQUEST = 'FETCH_STUDENTS_RECORDS_REQUEST';\r\nexport const FETCH_STUDENTS_RECORDS_SUCCESS = 'FETCH_STUDENTS_RECORDS_SUCCESS';\r\nexport const FETCH_STUDENTS_RECORDS_FAIL = 'FETCH_STUDENTS_RECORDS_FAIL';\r\n\r\nexport const CREATE_NEW_GRADE_RECORD = 'CREATE_NEW_GRADE_RECORD';\r\nexport const EDIT_GRADE_RECORD = 'EDIT_GRADE_RECORD';\r\nexport const DELETE_GRADE_RECORDS = 'DELETE_GRADE_RECORDS';\r\nexport const FETCH_GRADES_RECORDS_REQUEST = 'FETCH_GRADES_RECORDS_REQUEST';\r\nexport const FETCH_GRADES_RECORDS_SUCCESS = 'FETCH_GRADES_RECORDS_SUCCESS';\r\nexport const FETCH_GRADES_RECORDS_FAIL = 'FETCH_GRADES_RECORDS_FAIL';\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport { connectRouter, routerMiddleware } from \"connected-react-router\";\nimport thunk from \"redux-thunk\";\nimport createHistory from \"history/createBrowserHistory\";\nimport reducers from \"./reducers\";\n\nexport const history = createHistory({\n  basename: process.env.PUBLIC_URL\n});\n\nconst initialState = {};\nconst enhancers = [];\nconst middleware = [thunk, routerMiddleware(history)];\n\nif (process.env.NODE_ENV === \"development\") {\n  const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__;\n\n  if (typeof devToolsExtension === \"function\") {\n    enhancers.push(devToolsExtension());\n  }\n}\n\nconst composedEnhancers = compose(\n  applyMiddleware(...middleware),\n  ...enhancers\n);\n\nexport default createStore(\n  connectRouter(history)(reducers),\n  initialState,\n  composedEnhancers\n);\n","export const MODAL_PORTAL_ID = \"modal-portal\";\r\n\r\nexport const modalIds = {\r\n  GRADES_DATA_FORM: 'GRADES_DATA_FORM',\r\n  STUDENTS_DATA_FORM: 'STUDENTS_DATA_FORM',\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nclass StudentsDataForm extends React.Component {\r\n  static defaultProps = {\r\n    isEditMode: false,\r\n    initialData: {}\r\n  };\r\n\r\n  static propTypes = {\r\n    isEditMode: PropTypes.bool.isRequired,\r\n    onClose: PropTypes.func.isRequired,\r\n    onSubmit: PropTypes.func.isRequired,\r\n    initialData: PropTypes.object.isRequired,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      form: {\r\n        // Note that we don't use spread operator here because initialData may contain redundant stuff\r\n        firstName: props.initialData.firstName || '',\r\n        lastName: props.initialData.lastName || '',\r\n        birthdayDate: props.initialData.birthdayDate || '',\r\n      }\r\n    };\r\n  }\r\n\r\n  setFormData = (field, e) => {\r\n    this.setState({\r\n      form: {\r\n        ...this.state.form,\r\n        [field]: e.target.value\r\n      }\r\n    });\r\n  };\r\n\r\n  onFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(\r\n      {\r\n        ...this.props.initialData,  // pass the data (like recordId) that we didn't keep in the state\r\n        ...this.state.form\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Dialog open={true} onClose={this.props.onClose}>\r\n        <DialogTitle> {this.props.isEditMode ? 'Edit ' : 'Add a new '} student </DialogTitle>\r\n        <DialogContent>\r\n          <form id=\"students-data-form\" onSubmit={this.onFormSubmit} data-test=\"students-data-form\">\r\n            <Grid container spacing={24}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  label=\"First Name\"\r\n                  value={this.state.form.firstName}\r\n                  onChange={this.setFormData.bind(this, 'firstName')}\r\n                  fullWidth\r\n                  inputProps={{'data-test': 'students-data-form-firstName'}}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  label=\"Last Name\"\r\n                  value={this.state.form.lastName}\r\n                  onChange={this.setFormData.bind(this, 'lastName')}\r\n                  fullWidth\r\n                  inputProps={{'data-test': 'students-data-form-lastName'}}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  type=\"date\"\r\n                  label=\"Birthday Date\"\r\n                  value={this.state.form.birthdayDate.split('T')[0]}\r\n                  onChange={this.setFormData.bind(this, 'birthdayDate')}\r\n                  InputLabelProps={{ shrink: true }}\r\n                  fullWidth\r\n                  inputProps={{'data-test': 'students-data-form-birthdayDate'}}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={this.props.onClose} color=\"primary\" data-test=\"students-data-btn-cancel\">\r\n            Cancel\r\n          </Button>\r\n          <Button color=\"primary\" type=\"submit\" form=\"students-data-form\" data-test=\"students-data-btn-submit\">\r\n            Submit\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StudentsDataForm;\r\n","import { HIDE_MODAL, SHOW_MODAL } from \"../constants/actionTypes\";\r\n\r\nexport const showModal = (id, modalProps) => {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: SHOW_MODAL,\r\n      id,\r\n      modalProps\r\n    });\r\n  };\r\n};\r\n\r\nexport const hideModal = (id) => {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: HIDE_MODAL,\r\n      id\r\n    });\r\n  };\r\n};\r\n","/**\r\n * @param {Object} recordsById - object with numeric keys\r\n * @return {Number}\r\n */\r\nexport function getNextRecordId(recordsById) {\r\n  return Math.max(...Object.keys(recordsById).map(Number), 0) + 1;\r\n}\r\n\r\n/**\r\n * @param {Date} date\r\n * @return {number}\r\n */\r\nexport function getExpiredYears(date) {\r\n  return new Date().getFullYear() - new Date(date).getFullYear();\r\n}\r\n","import {\r\n  CREATE_NEW_STUDENT_RECORD,\r\n  EDIT_STUDENT_RECORD,\r\n  DELETE_STUDENT_RECORD,\r\n  FETCH_STUDENTS_RECORDS_REQUEST,\r\n  FETCH_STUDENTS_RECORDS_SUCCESS,\r\n  FETCH_STUDENTS_RECORDS_FAIL\r\n} from \"../constants/actionTypes\";\r\nimport { modalIds } from \"../constants\";\r\nimport { hideModal } from \"./modals\";\r\nimport { getNextRecordId } from \"../utils\";\r\n\r\nexport const fetchStudentsRecords = () => {\r\n  return (dispatch, getState) => {\r\n    if (getState().students.studentsById) {\r\n      // Don't fetch new data to prevent overwriting of local changes\r\n      // (just a feature of this implementation since we can't synchronize the apps's data with the server)\r\n      return;\r\n    }\r\n\r\n    dispatch({\r\n      type: FETCH_STUDENTS_RECORDS_REQUEST,\r\n    });\r\n\r\n    fetch('https://api.jsonbin.io/b/5c6335bba83a293177310e03/1', {\r\n      mode: 'cors',\r\n      method: 'get',\r\n      headers: {\r\n        'Content-Type': 'application/json; charset=UTF-8',\r\n      }\r\n    })\r\n      .then( response => {\r\n        const contentType = response.headers.get(\"content-type\");\r\n        if (response.status !== 200 || !contentType || !contentType.includes(\"application/json\"))\r\n          throw new Error('Failed to fetch data');\r\n        else\r\n          return response.json();\r\n      })\r\n      .then( data => {\r\n        if (!data.success || !data.entities || !data.entities.studentsById)\r\n          throw new Error('Failed to fetch data');\r\n\r\n        dispatch({\r\n          type: FETCH_STUDENTS_RECORDS_SUCCESS,\r\n          studentsById: data.entities.studentsById\r\n        });\r\n      })\r\n      .catch( error =>  {\r\n        dispatch({\r\n          type: FETCH_STUDENTS_RECORDS_FAIL,\r\n          error: error.message\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const createNewStudentRecord = (record) => {\r\n  return (dispatch, getState) => {\r\n    dispatch({\r\n      type: CREATE_NEW_STUDENT_RECORD,\r\n      record: {\r\n        ...record,\r\n        id: getNextRecordId(getState().students.studentsById)\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nexport const editStudentRecord = (record) => {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: EDIT_STUDENT_RECORD,\r\n      record\r\n    });\r\n  };\r\n};\r\n\r\nexport const submitStudentsDataForm = (record) => {\r\n  return dispatch => {\r\n    if (record.id)  // if the record has an id - it means we were editing it, else a new record wouldn't have the id yet\r\n      dispatch(editStudentRecord(record));\r\n    else\r\n      dispatch(createNewStudentRecord(record));\r\n    dispatch(hideModal(modalIds.STUDENTS_DATA_FORM));\r\n  };\r\n};\r\n\r\nexport const deleteStudentRecord = (recordId) => {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: DELETE_STUDENT_RECORD,\r\n      recordId\r\n    });\r\n  };\r\n};\r\n","import React  from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Portal from \"@material-ui/core/Portal\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { MODAL_PORTAL_ID, modalIds } from \"../constants\";\r\nimport StudentsDataForm from \"./StudentsDataForm\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { hideModal, showModal } from \"../actions/modals\";\r\nimport {\r\n  deleteStudentRecord,\r\n  fetchStudentsRecords,\r\n  submitStudentsDataForm\r\n} from \"../actions/students\";\r\nimport { getExpiredYears } from \"../utils\";\r\n\r\nconst styles = theme => ({\r\n  errorMessage: {\r\n    margin: `${theme.spacing.unit * 3}px 0`\r\n  },\r\n  loadingMessage: {\r\n    margin: `${theme.spacing.unit * 3}px 0`\r\n  },\r\n  actionButtonsContainer: {\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  actionButton: {\r\n    [theme.breakpoints.down('sm')]: {\r\n      padding: '5px'\r\n    },\r\n  }\r\n});\r\n\r\nclass StudentsPage extends React.Component {\r\n  static propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    closeStudentsDataForm: PropTypes.func.isRequired,\r\n    openStudentsDataForm: PropTypes.func.isRequired,\r\n    submitStudentsDataForm: PropTypes.func.isRequired,\r\n    fetchStudentsRecords: PropTypes.func.isRequired,\r\n    deleteStudentRecord: PropTypes.func.isRequired,\r\n    tableData: PropTypes.array.isRequired,\r\n    studentsDataFormProps: PropTypes.object.isRequired,\r\n    studentsById: PropTypes.object,\r\n    isOpenStudentsDataForm: PropTypes.bool,\r\n    isFetchingData: PropTypes.bool,\r\n    fetchDataError: PropTypes.string,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.portalContainer = document.getElementById(MODAL_PORTAL_ID);\r\n    this.props.fetchStudentsRecords();\r\n  }\r\n  \r\n  getTableOptions = () => {\r\n    return {\r\n      filterType: 'checkbox',\r\n      print: false,\r\n      download: false,\r\n      filter: false,\r\n      selectableRows: false,\r\n      elevation: 0,\r\n      pagination: false,\r\n      responsive: 'scroll',\r\n      customToolbar: () => (\r\n        <Tooltip title=\"Add a new record\">\r\n          <IconButton\r\n            onClick={() => this.props.openStudentsDataForm({ isEditMode: false })}\r\n            data-test=\"btn-add-student-record\"\r\n          >\r\n            <Icon> add </Icon>\r\n          </IconButton>\r\n        </Tooltip>\r\n      )\r\n    };\r\n  };\r\n  getTableColumns = () => {\r\n    return [\r\n      {\r\n        name: \"Actions\",\r\n        options: {\r\n          customBodyRender: (recordId) => {\r\n            const studentsDataFormProps = {\r\n              isEditMode: true,\r\n              initialData: this.props.studentsById[recordId]\r\n            };\r\n            return (\r\n              <div className={this.props.classes.actionButtonsContainer}>\r\n                <Tooltip title=\"Edit the record\">\r\n                  <IconButton\r\n                    className={this.props.classes.actionButton}\r\n                    onClick={() => this.props.openStudentsDataForm(studentsDataFormProps)}\r\n                    data-test=\"btn-edit-student-record\"\r\n                  >\r\n                    <Icon> edit </Icon>\r\n                  </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title=\"Delete the record\">\r\n                  <IconButton\r\n                    className={this.props.classes.actionButton}\r\n                    onClick={() => this.props.deleteStudentRecord(recordId)}\r\n                    data-test=\"btn-delete-student-record\"\r\n                  >\r\n                    <Icon> delete </Icon>\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </div>\r\n            );\r\n          },\r\n          filter: false,\r\n          sort: false,\r\n          download: false,\r\n        }\r\n      },\r\n      { name: \"First Name\" },\r\n      { name: \"Last Name\" },\r\n      { name: \"Age\" },\r\n      {\r\n        name: \"Birthday Date\",\r\n        options: {\r\n          customBodyRender(value) {\r\n            return new Date(value).toLocaleDateString();\r\n          }\r\n        }\r\n      },\r\n    ];\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      tableData,\r\n      studentsDataFormProps,\r\n      closeStudentsDataForm,\r\n      submitStudentsDataForm,\r\n      isOpenStudentsDataForm,\r\n      classes,\r\n      fetchDataError,\r\n      isFetchingData\r\n    } = this.props;\r\n\r\n    if (fetchDataError) {\r\n      return (\r\n        <Typography align=\"center\" variant=\"h5\" className={classes.errorMessage}>\r\n          {fetchDataError}\r\n          <br/>\r\n          Try refreshing the page.\r\n        </Typography>\r\n      );\r\n    } else if (isFetchingData) {\r\n      return (\r\n        <Typography align=\"center\" variant=\"h5\" className={classes.loadingMessage}>\r\n          Loading data...\r\n        </Typography>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <section data-test=\"students-page\">\r\n        <MUIDataTable\r\n          data={tableData}\r\n          columns={this.getTableColumns()}\r\n          options={this.getTableOptions()}\r\n        />\r\n        {isOpenStudentsDataForm && (\r\n          <Portal container={this.portalContainer}>\r\n            <StudentsDataForm\r\n              {...studentsDataFormProps}\r\n              onClose={closeStudentsDataForm}\r\n              onSubmit={submitStudentsDataForm}\r\n            />\r\n          </Portal>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ modals, students }) => ({\r\n  isOpenStudentsDataForm: modals.activeModal === modalIds.STUDENTS_DATA_FORM,\r\n  studentsDataFormProps: modals.modalProps || {},\r\n  studentsById: students.studentsById,\r\n  isFetchingData: students.isFetchingData || !students.studentsById,\r\n  fetchDataError: students.fetchDataError,\r\n  tableData: Object.values(students.studentsById || {}).map(({id, firstName, lastName, birthdayDate}) => [\r\n    id, firstName, lastName, getExpiredYears(birthdayDate), birthdayDate\r\n  ])\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => bindActionCreators(\r\n  {\r\n    openStudentsDataForm: (formProps) => showModal(modalIds.STUDENTS_DATA_FORM, formProps),\r\n    closeStudentsDataForm: () => hideModal(modalIds.STUDENTS_DATA_FORM),\r\n    submitStudentsDataForm,\r\n    fetchStudentsRecords,\r\n    deleteStudentRecord\r\n  },\r\n  dispatch\r\n);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(StudentsPage));\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nclass GradesDataForm extends React.Component {\r\n  static defaultProps = {\r\n    isOpen: false,\r\n    isEditMode: false,\r\n    initialData: {}\r\n  };\r\n\r\n  static propTypes = {\r\n    isEditMode: PropTypes.bool.isRequired,\r\n    onClose: PropTypes.func.isRequired,\r\n    onSubmit: PropTypes.func.isRequired,\r\n    initialData: PropTypes.object.isRequired,\r\n    studentNamesById: PropTypes.object.isRequired,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      form: {\r\n        // Note that we don't use spread operator here because initialData may contain redundant stuff\r\n        studentId: props.initialData.studentId || '',\r\n        profession: props.initialData.profession || '',\r\n        testDate: props.initialData.testDate || '',\r\n        grade: props.initialData.grade || '',\r\n      }\r\n    };\r\n  }\r\n\r\n  setFormData = (field, e) => {\r\n    this.setState({\r\n      form: {\r\n        ...this.state.form,\r\n        [field]: e.target.value\r\n      }\r\n    });\r\n  };\r\n\r\n  onFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(\r\n      {\r\n        ...this.props.initialData,  // pass the data (like recordId) that we didn't keep in the state\r\n        ...this.state.form\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Dialog open={true} onClose={this.props.onClose}>\r\n        <DialogTitle> {this.props.isEditMode ? 'Edit ' : 'Add a new '} grade </DialogTitle>\r\n        <DialogContent>\r\n          <form id=\"grades-data-form\" onSubmit={this.onFormSubmit} data-test=\"grades-data-form\">\r\n            <Grid container spacing={24}>\r\n              <Grid item xs={12}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel htmlFor=\"student-input\"> Student </InputLabel>\r\n                  <Select\r\n                    native\r\n                    required\r\n                    value={this.state.form.studentId}\r\n                    onChange={this.setFormData.bind(this, 'studentId')}\r\n                    inputProps={{\r\n                      'id': 'student-input',\r\n                      'data-test': 'grades-data-form-studentId'\r\n                    }}\r\n                  >\r\n                    <option key=\"none\" value=\"\" />\r\n                    {Object.entries(this.props.studentNamesById).map(([id, name]) => (\r\n                      <option value={id} key={id}> {name} </option>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    required\r\n                    label=\"Profession\"\r\n                    value={this.state.form.profession}\r\n                    onChange={this.setFormData.bind(this, 'profession')}\r\n                    fullWidth\r\n                    inputProps={{'data-test': 'grades-data-form-profession'}}\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    required\r\n                    type=\"date\"\r\n                    label=\"Test Date\"\r\n                    value={this.state.form.testDate.split('T')[0]}\r\n                    onChange={this.setFormData.bind(this, 'testDate')}\r\n                    InputLabelProps={{shrink: true}}\r\n                    inputProps={{'data-test': 'grades-data-form-testDate'}}\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel htmlFor=\"grade-input\"> Grade </InputLabel>\r\n                  <Select\r\n                    native\r\n                    required\r\n                    value={this.state.form.grade}\r\n                    onChange={this.setFormData.bind(this, 'grade')}\r\n                    inputProps={{\r\n                      'id': 'grade-input',\r\n                      'data-test': 'grades-data-form-grade'\r\n                    }}\r\n                  >\r\n                    <option key=\"none\" value=\"\" />\r\n                    <option key=\"A\" value=\"A\"> A </option>\r\n                    <option key=\"B\" value=\"B\"> B </option>\r\n                    <option key=\"C\" value=\"C\"> C </option>\r\n                    <option key=\"D\" value=\"D\"> D </option>\r\n                    <option key=\"E\" value=\"E\"> E </option>\r\n                    <option key=\"F\" value=\"F\"> F </option>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={this.props.onClose} color=\"primary\" data-test=\"grades-data-btn-cancel\">\r\n            Cancel\r\n          </Button>\r\n          <Button color=\"primary\" type=\"submit\" form=\"grades-data-form\" data-test=\"grades-data-btn-submit\">\r\n            Submit\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GradesDataForm;\r\n","import {\r\n  CREATE_NEW_GRADE_RECORD,\r\n  EDIT_GRADE_RECORD,\r\n  DELETE_GRADE_RECORDS,\r\n  FETCH_GRADES_RECORDS_REQUEST,\r\n  FETCH_GRADES_RECORDS_SUCCESS,\r\n  FETCH_GRADES_RECORDS_FAIL\r\n} from \"../constants/actionTypes\";\r\nimport { modalIds } from \"../constants\";\r\nimport { hideModal } from \"./modals\";\r\nimport { getNextRecordId } from \"../utils\";\r\n\r\nexport const fetchGradesRecords = () => {\r\n  return (dispatch, getState) => {\r\n    if (getState().grades.gradesById) {\r\n      // Don't fetch new data to prevent overwriting of local changes\r\n      // (just a feature of this implementation since we can't synchronize the apps's data with the server)\r\n      return;\r\n    }\r\n\r\n    dispatch({\r\n      type: FETCH_GRADES_RECORDS_REQUEST,\r\n    });\r\n\r\n    fetch('https://api.jsonbin.io/b/5c633a2c6874aa33ba0de476', {\r\n      mode: 'cors',\r\n      method: 'get',\r\n      headers: {\r\n        'Content-Type': 'application/json; charset=UTF-8',\r\n      }\r\n    })\r\n      .then( response => {\r\n        const contentType = response.headers.get(\"content-type\");\r\n        if (response.status !== 200 || !contentType || !contentType.includes(\"application/json\"))\r\n          throw new Error('Failed to fetch data');\r\n        else\r\n          return response.json();\r\n      })\r\n      .then( data => {\r\n        if (!data.success || !data.entities || !data.entities.gradesById)\r\n          throw new Error('Failed to fetch data');\r\n\r\n        dispatch({\r\n          type: FETCH_GRADES_RECORDS_SUCCESS,\r\n          gradesById: data.entities.gradesById\r\n        });\r\n      })\r\n      .catch( error =>  {\r\n        dispatch({\r\n          type: FETCH_GRADES_RECORDS_FAIL,\r\n          error: error.message\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const createNewGradeRecord = (record) => {\r\n  return (dispatch, getState) => {\r\n    dispatch({\r\n      type: CREATE_NEW_GRADE_RECORD,\r\n      record: {\r\n        ...record,\r\n        id: getNextRecordId(getState().grades.gradesById)\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nexport const editGradeRecord = (record) => {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: EDIT_GRADE_RECORD,\r\n      record\r\n    });\r\n  };\r\n};\r\n\r\nexport const submitGradesDataForm = (record) => {\r\n  return dispatch => {\r\n    if (record.id)  // if the record has an id - it means we were editing it, else a new record wouldn't have the id yet\r\n      dispatch(editGradeRecord(record));\r\n    else\r\n      dispatch(createNewGradeRecord(record));\r\n    dispatch(hideModal(modalIds.GRADES_DATA_FORM));\r\n  };\r\n};\r\n\r\nexport const deleteGradeRecords = (ids) => {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: DELETE_GRADE_RECORDS,\r\n      ids\r\n    });\r\n  };\r\n};\r\n","import _ from 'lodash';\r\nimport React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Portal from \"@material-ui/core/Portal\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { MODAL_PORTAL_ID, modalIds } from \"../constants\";\r\nimport GradesDataForm from \"./GradesDataForm\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { hideModal, showModal } from \"../actions/modals\";\r\nimport {\r\n  deleteGradeRecords,\r\n  fetchGradesRecords,\r\n  submitGradesDataForm\r\n} from \"../actions/grades\";\r\nimport { fetchStudentsRecords } from \"../actions/students\";\r\n\r\nconst styles = theme => ({\r\n  errorMessage: {\r\n    margin: `${theme.spacing.unit * 3}px 0`\r\n  },\r\n  loadingMessage: {\r\n    margin: `${theme.spacing.unit * 3}px 0`\r\n  },\r\n  actionButtonsContainer: {\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  actionButton: {\r\n    [theme.breakpoints.down('sm')]: {\r\n      padding: '5px'\r\n    },\r\n  }\r\n});\r\n\r\nclass GradesPage extends React.Component {\r\n  static propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    closeGradesDataForm: PropTypes.func.isRequired,\r\n    openGradesDataForm: PropTypes.func.isRequired,\r\n    submitGradesDataForm: PropTypes.func.isRequired,\r\n    fetchGradesRecords: PropTypes.func.isRequired,\r\n    fetchStudentsRecords: PropTypes.func.isRequired,\r\n    deleteGradeRecords: PropTypes.func.isRequired,\r\n    tableData: PropTypes.array.isRequired,\r\n    gradesDataFormProps: PropTypes.object.isRequired,\r\n    gradesById: PropTypes.object,\r\n    studentNamesById: PropTypes.object,\r\n    isOpenGradesDataForm: PropTypes.bool,\r\n    isFetchingData: PropTypes.bool,\r\n    fetchDataError: PropTypes.string\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.portalContainer = document.getElementById(MODAL_PORTAL_ID);\r\n    this.props.fetchStudentsRecords();\r\n    this.props.fetchGradesRecords();\r\n  }\r\n\r\n  getTableOptions = () => {\r\n    return {\r\n      filterType: 'checkbox',\r\n      print: false,\r\n      download: false,\r\n      filter: false,\r\n      selectableRows: false,\r\n      elevation: 0,\r\n      pagination: false,\r\n      responsive: 'scroll',\r\n      customToolbar: () => (\r\n        <Tooltip title=\"Add a new record\">\r\n          <IconButton\r\n            onClick={() => this.props.openGradesDataForm({ isEditMode: false })}\r\n            data-test=\"btn-add-grade-record\"\r\n          >\r\n            <Icon> add </Icon>\r\n          </IconButton>\r\n        </Tooltip>\r\n      )\r\n    };\r\n  };\r\n  getTableColumns = () => {\r\n    return [\r\n      {\r\n        name: \"Actions\",\r\n        options: {\r\n          customBodyRender: (recordId) => {\r\n            const gradesDataFormProps = {\r\n              isEditMode: true,\r\n              initialData: this.props.gradesById[recordId]\r\n            };\r\n            return (\r\n              <div className={this.props.classes.actionButtonsContainer}>\r\n                <Tooltip title=\"Edit the record\">\r\n                  <IconButton\r\n                    className={this.props.classes.actionButton}\r\n                    onClick={() => this.props.openGradesDataForm(gradesDataFormProps)}\r\n                    data-test=\"btn-edit-grade-record\"\r\n                  >\r\n                    <Icon> edit </Icon>\r\n                  </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title=\"Delete the record\">\r\n                  <IconButton\r\n                    className={this.props.classes.actionButton}\r\n                    onClick={() => this.props.deleteGradeRecords(recordId)}\r\n                    data-test=\"btn-delete-grade-record\"\r\n                  >\r\n                    <Icon> delete </Icon>\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </div>\r\n            );\r\n          },\r\n          filter: false,\r\n          sort: false,\r\n          download: false,\r\n        }\r\n      },\r\n      { name: \"Student\" },\r\n      { name: \"Profession\" },\r\n      {\r\n        name: \"Test Date\",\r\n        options: {\r\n          customBodyRender: (value) => new Date(value).toLocaleDateString()\r\n        }\r\n      },\r\n      { name: \"Grade\" },\r\n    ];\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      tableData,\r\n      gradesDataFormProps,\r\n      studentNamesById,\r\n      closeGradesDataForm,\r\n      submitGradesDataForm,\r\n      isOpenGradesDataForm,\r\n      classes,\r\n      fetchDataError,\r\n      isFetchingData\r\n    } = this.props;\r\n\r\n    if (fetchDataError) {\r\n      return (\r\n        <Typography align=\"center\" variant=\"h5\" className={classes.errorMessage}>\r\n          {fetchDataError}\r\n          <br/>\r\n          Try refreshing the page.\r\n        </Typography>\r\n      );\r\n    } else if (isFetchingData) {\r\n      return (\r\n        <Typography align=\"center\" variant=\"h5\" className={classes.loadingMessage}>\r\n          Loading data...\r\n        </Typography>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <section data-test=\"grades-page\">\r\n        <MUIDataTable\r\n          data={tableData}\r\n          columns={this.getTableColumns()}\r\n          options={this.getTableOptions()}\r\n        />\r\n        {isOpenGradesDataForm && (\r\n          <Portal container={this.portalContainer}>\r\n            <GradesDataForm\r\n              {...gradesDataFormProps}\r\n              studentNamesById={studentNamesById}\r\n              onClose={closeGradesDataForm}\r\n              onSubmit={submitGradesDataForm}\r\n            />\r\n          </Portal>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nfunction getStudentName(studentsById, studentId) {\r\n  if (!studentsById) {\r\n    return 'Loading...';\r\n  }\r\n  if (studentsById[studentId]) {\r\n    return studentsById[studentId].firstName + ' ' + studentsById[studentId].lastName;\r\n  }\r\n  return 'DELETED';\r\n}\r\n\r\nconst mapStateToProps = ({ modals, grades, students }) => {\r\n  const {studentsById} = students;\r\n  return {\r\n    isOpenGradesDataForm: modals.activeModal === modalIds.GRADES_DATA_FORM,\r\n    gradesDataFormProps: modals.modalProps || {},\r\n    isFetchingData: students.isFetchingData || grades.isFetchingData || !studentsById || !grades.gradesById,\r\n    studentNamesById : studentsById ? _.mapValues(studentsById, rec => rec.firstName + ' ' + rec.lastName) : null,\r\n    gradesById: grades.gradesById,\r\n    fetchDataError: grades.fetchDataError || students.fetchDataError,\r\n    tableData: Object.values(grades.gradesById || {}).map(({id, studentId, profession, testDate, grade}) => [\r\n      id, getStudentName(studentsById, studentId), profession, testDate, grade\r\n    ])\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => bindActionCreators(\r\n  {\r\n    openGradesDataForm: (formProps) => showModal(modalIds.GRADES_DATA_FORM, formProps),\r\n    closeGradesDataForm: () => hideModal(modalIds.GRADES_DATA_FORM),\r\n    submitGradesDataForm,\r\n    fetchGradesRecords,\r\n    fetchStudentsRecords,\r\n    deleteGradeRecords\r\n  },\r\n  dispatch\r\n);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(GradesPage));\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nfunction Header (props) {\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Tabs variant=\"fullWidth\" value={props.location.pathname}>\r\n        <Tab label=\"Students list\" value=\"/students\" component={NavLink} to=\"/students\" />\r\n        <Tab label=\"Grades list\" value=\"/grades\" component={NavLink} to=\"/grades\" />\r\n      </Tabs>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  location: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withRouter(Header);\r\n","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { withStyles } from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst styles = theme => ({\r\n  footer: {\r\n    backgroundColor: theme.palette.background.default,\r\n    padding: `${theme.spacing.unit}px 0`,\r\n  },\r\n});\r\n\r\nFooter.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction Footer(props) {\r\n  const { classes } = props;\r\n\r\n  return (\r\n    <footer className={classes.footer}>\r\n      <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\r\n        Max Henash (c) 2019\r\n      </Typography>\r\n    </footer>\r\n  );\r\n}\r\n\r\n\r\nexport default withStyles(styles)(Footer);\r\n","import React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Redirect, Switch } from \"react-router\";\r\nimport StudentsPage from \"./StudentsPage\";\r\nimport GradesPage from \"./GradesPage\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport { MODAL_PORTAL_ID } from \"../constants\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst styles = theme => ({\r\n  app: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    minHeight: '100vh',\r\n    minWidth: '320px',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  pageContainer: {\r\n    flex: 1\r\n  },\r\n});\r\n\r\nApp.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction App(props) {\r\n  const { classes } = props;\r\n\r\n  return (\r\n    <div className={classes.app}>\r\n      <Header />\r\n      <main className={classes.pageContainer}>\r\n        <Switch>\r\n          <Route path=\"/grades\" component={GradesPage}/>\r\n          <Route path=\"/students\" component={StudentsPage}/>\r\n          <Redirect to=\"/students\"/>\r\n        </Switch>\r\n      </main>\r\n      <div id={MODAL_PORTAL_ID} />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","import React, { Fragment } from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { ConnectedRouter } from \"connected-react-router\";\r\nimport store, { history } from \"./store\";\r\nimport App from \"./components/App\";\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <ConnectedRouter history={history}>\r\n      <Fragment>\r\n        <CssBaseline />\r\n        <App/>\r\n      </Fragment>\r\n    </ConnectedRouter>\r\n  </Provider>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}